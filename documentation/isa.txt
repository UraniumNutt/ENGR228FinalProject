// Ethan Thummel | Amir Bahmandar | Fabiola Sore 4/13/23

CPU228 ISA

// registers

    rx = register file register
    ry = another register file register
    rz = a third register file register

    Cin = carry in
    Cout = carry out

    zf = zero flag
    cf = carry flag
    pf = Positive flag
    nf = Negative flag
    of = Overflow flag

    pc = program counter
    sp = stack pointer
    tos = top of stack

// addressing modes

    a       - direct                     | M[a]
    #i      - immediate                  | i
    (a)     - indirect                   | M[M[a]]
    a[ry]   - direct indexed             | M[a + ry]
    (a)[ry] - indirect indexed           | M[M[a] + ry]
    ry      - register                   | ry
    (ry)    - register indirect          | M[ry]

    * = any addressing mode

nop - No OPeration

// load operations

ld rx, *      - LoaD                     | rx <- *                    


// store operations

st *, rx      - STore                    | * <- rx

// ALU operations
// Note: all of these also update the status flags according to the result of the operation

ref  rx       - REFlect rx               | rx <-  rx
add  rx, *    - ADD with carry           | rx <-  rx + * + Cin
adwc rx, *    - ADd Without Carry        | rx <-  rx + *
sub  rx, *    - SUBstract with carry     | rx <-  rx - * + Cin (?) ; Note: double check this
sbwc rx, *    - SuBstract Without Carry  | rx <-  rx - *
mul  rx, *    - MULtiply                 | rx <-  rx * * ; Note: result truncated to 16 bits
inc  rx       - INCrement                | rx <-  rx + 1
dec  rx       - DECrement                | rx <-  rx - 1
chs  rx       - CHange Sign              | rx <- ~rx + 1
and  rx, *    - bitwise AND              | rx <-  rx & *
or   rx, *    - bitwise OR               | rx <-  rx | *
not  rx       - bitwise NOT              | rx <- ~rx
xor  rx, *    - bitwise XOR              | rx <-  rx xor *
sl   rx       - Shift Left               | rx <-  rx << 1
sr   rx       - Shift Right              | rx <-  rx >> 1
cmp  rx, *    - CoMPare                  | rx - * ; Note: does not write back, only updates flags
bit  rx, *    - BIt Test                 | rx & * ; Note: does not write back, only updates flags

// clear / set flags

zc            - Zero Clear flag          | zf <- 0
zs            - Zero Set flag            | zf <- 1
cc            - Carry Clear flag         | cf <- 0
cs            - Carry Set flag           | cf <- 1
oc            - Overflow Clear flag      | oc <- 0
os            - Overflow Set flag        | oc <- 1
pc            - Positive Clear flag      | pf <- 0 
ps            - Positive Set flag        | pf <- 1
nc            - Negative Clear flag      | nf <- 0
ns            - Negative Set flag        | nf <- 1

// jump instructions

jmp *         - JuMP                     | pc <- *
jz  *         - Jump Zero                | if zf == 1 then pc <- *
jnz *         - Jump Not Zero            | if zf == 0 then pc <- *
jc  *         - Jump Carry               | if cf == 1 then pc <- *
jnc *         - Jump Not Carry           | if cf == 0 then pc <- *
jo *          - Jump Overflow            | if of == 1 then pc <- *
jno           - Jump Not Overflow        | if of == 0 then pc <- *
jp  *         - Jump Positive            | if pf == 1 then pc <- *
jnp *         - Jump Not Positive        | if pf == 0 then pc <- *
jn  *         - Jump Negative            | if nf == 1 then pc <- *
jnn *         - Jump Not Negative        | if nf == 0 then pc <- *

// stack operations

psh rx        - PuSH                     | tos <- rx & sp++
pul rx        - PULl                     | sp-- & rx <- tos 

// sub routines

jsr *         - Jump Sub Routine         | tos <- pc & sp++ & pc <- *
rts           - ReTurn Sub routine       | sp-- & pc <- tos

