#bits 16

#subruledef register
{
	r0 => 0b000`3
	r1 => 0b001`3
	r2 => 0b010`3
	r3 => 0b011`3
	r4 => 0b100`3
	r5 => 0b101`3
	r6 => 0b110`3
	r7 => 0b111`3

}

#subruledef addressingMode
{
    {address}            		=> 0b000`3 @ 0b000`3 @ 0b0`1 @ address`16   ; direct
    #{immediate}         		=> 0b001`3 @ 0b000`3 @ 0b0`1 @ immediate`16 ; immediate
    ({indirect})         		=> 0b010`3 @ 0b000`3 @ 0b0`1 @ indirect`16  ; indirect
	{address}[{r: register}]    => 0b011`3 @ r 		 @ 0b0`1 @ address`16   ; direct indexed
	({indirect})[{r: register}] => 0b100`3 @ r 		 @ 0b0`1 @ indirect`16  ; indirect indexed
	{r: register}               => 0b101`3 @ r 		 @ 0b0`1 				; register
	({r: register})		        => 0b110`3 @ r 		 @ 0b0`1				; register indirect

}

#ruledef
{

	; nop
	nop 									 => 0b00000000`8

	; load / store
	ld   {r: register}, {am: addressingMode} => 0b000001`6 @ r @ am
	st   {am: addressingMode}, {r: register} => 0b000010`6 @ r @ am

	; ALU
	ref  {r: register} 					     => 0b000011`6 @ r @ 0b0000000`7
	add  {r: register}, {am: addressingMode} => 0b000100`6 @ r @ am
	adwc {r: register}, {am: addressingMode} => 0b000101`6 @ r @ am
	sub  {r: register}, {am: addressingMode} => 0b000110`6 @ r @ am
	sbwb {r: register}, {am: addressingMode} => 0b000111`6 @ r @ am
	mul  {r: register}, {am: addressingMode} => 0b001000`6 @ r @ am
	inc  {r: register} 						 => 0b001001`6 @ r @ 0b0000000`7
	dec  {r: register} 						 => 0b001010`6 @ r @ 0b0000000`7
	chs  {r: register} 						 => 0b001011`6 @ r @ 0b0000000`7
	and  {r: register}, {am: addressingMode} => 0b001100`6 @ r @ am
	or   {r: register}, {am: addressingMode} => 0b001101`6 @ r @ am
	not  {r: register} 						 => 0b001110`6 @ r @ 0b0000000`7
	xor  {r: register}, {am: addressingMode} => 0b001111`6 @ r @ am
	sl   {r: register}                       => 0b010000`6 @ r @ 0b0000000`7
	sr   {r: register}                       => 0b010001`6 @ r @ 0b0000000`7
	sl   {r: register}, {am: addressingMode} => 0b010010`6 @ r @ am
	sr   {r: register}, {am: addressingMode} => 0b010011`6 @ r @ am
	rol  {r: register}                       => 0b010100`6 @ r @ 0b0000000`7
	ror  {r: register}                       => 0b010101`6 @ r @ 0b0000000`7
	rol  {r: register}, {am: addressingMode} => 0b010110`6 @ r @ am
	ror  {r: register}, {am: addressingMode} => 0b010111`6 @ r @ am
	cmp  {r: register}, {am: addressingMode} => 0b011000`6 @ r @ am
	bit  {r: register}, {am: addressingMode} => 0b011001`6 @ r @ am

	; clear / set flags
	zc										 => 0b011010`6 @ 0b0000000000`10
	zs										 => 0b011011`6 @ 0b0000000000`10
	cc										 => 0b011100`6 @ 0b0000000000`10
	cs										 => 0b011101`6 @ 0b0000000000`10
	pc										 => 0b011110`6 @ 0b0000000000`10
	ps										 => 0b011111`6 @ 0b0000000000`10
	nc										 => 0b100000`6 @ 0b0000000000`10
	ns										 => 0b100001`6 @ 0b0000000000`10

	; jump instructions
	jmp {am: addressingMode} 				 => 0b100010`6 @ 0b000`3 @ am
	jz  {am: addressingMode} 				 => 0b100011`6 @ 0b000`3 @ am
	jnz {am: addressingMode} 				 => 0b100100`6 @ 0b000`3 @ am
	jp  {am: addressingMode} 				 => 0b100101`6 @ 0b000`3 @ am
	jnp {am: addressingMode} 				 => 0b100110`6 @ 0b000`3 @ am
	jn  {am: addressingMode} 				 => 0b100111`6 @ 0b000`3 @ am
	jnn {am: addressingMode} 				 => 0b101000`6 @ 0b000`3 @ am

	; stack operations
	psh {r: register}						 => 0b101001`6 @ r @ 0b0000000`7
	pul {r: register}						 => 0b101010`6 @ r @ 0b0000000`7

	;sub routines
	jsr {am: addressingMode}				 => 0b101011`6 @ 0b000`3 @ am
	rts										 => 0b101100`6 @ 0b0000000000`10


	

}
